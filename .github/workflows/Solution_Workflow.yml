name: Solution Workflow

on:
  push:
  pull_request:
    types: [opened, edited]

jobs:
  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Debug PR Body
      run: |
        echo "PR Body:"
        cat $GITHUB_EVENT_PATH
        PR_BODY=$(jq -r '.pull_request.body' $GITHUB_EVENT_PATH)
        echo "$PR_BODY"

    - name: Extract Organization Username and Repository Name
      id: extract
      run: |
        PR_BODY=$(jq -r '.pull_request.body' $GITHUB_EVENT_PATH)
        ORG_USERNAME=$(echo "$PR_BODY" | grep -oP '(?<=- \*\*Org Name\*\*: \[).*?(?=\])' || echo "Not provided")
        REPO_NAME=$(echo "$PR_BODY" | grep -oP '(?<=- \*\*Repo Name\*\*: \[).*?(?=\])' || echo "Not provided")
        echo "ORG_USERNAME=$ORG_USERNAME" >> $GITHUB_ENV
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Validate user
      id: validate_user
      run: |
          ORG=${{ env.ORG_USERNAME }}
          REPO=${{ env.REPO_NAME }}
          if [ -z "$ORG" ] || [ -z "$REPO" ]; then
            echo "Organization or repository name not provided"
            exit 1
          fi
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/repos/$ORG/$REPO)
          if [ "$RESPONSE" -ne 200 ]; then
            echo "Invalid organization or repository"
            exit 1
          fi

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
          python-version: '3.x'

    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install requests prettytable jq 
                         
    - name: Install Snyk & Authenticate
      run: |
          sudo npm install -g snyk
          snyk auth ${SNYK_TOKEN}
          
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      continue-on-error: true
      env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
          command: code test
          args: --sarif-file-output=snyk.sarif

    - name: Print the Snyk SARIF file
      run: cat snyk.sarif

    - name: Total No. of Security Issues
      run: |
          length=$(cat snyk.sarif | jq '.runs[0].results | length')
          echo "Results_Length=$length" >> $GITHUB_ENV

    - name: Run Python script to convert SARIF to CSV
      run: python code1.py

    - name: Upload CSV file as artifact
      uses: actions/upload-artifact@v4
      with: 
          name: snyk-output-csv
          path: snyk_output.csv
      
    - name: Send notification to Slack
      uses: slackapi/slack-github-action@v1.24.0
      if: always()
      with:
          payload: |
            {
              "text": "*The Snyk scan result for repo is : ${{ job.status }}* \n*Number of Vulnerabilities : ${{ env.Results_Length }}* \n*Detail*: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
